package com.imoob.hml.model;

import java.io.Serializable;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Entity
@Getter
@Setter
@Builder
@ToString
@Table(name = "tb_role")
@NoArgsConstructor
@AllArgsConstructor
@RequiredArgsConstructor
@EqualsAndHashCode
public class Role implements Serializable{
	
	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@NonNull
	@Column(length = 50)
	private String name;

	@NonNull
	@Column(length = 50)
	private String displayName;

	@NonNull
	@Column(length = 150)
	private String description;
	
//	@OneToMany(mappedBy="id.role")
//	private Set<UserRole> users = new HashSet<>();
//	
	
	@ManyToMany
	@JoinTable(
			name="tb_user_role",
			uniqueConstraints = @UniqueConstraint(columnNames = {"id_user", "id_role"}),
			joinColumns = @JoinColumn(name = "id_role"),
			inverseJoinColumns = @JoinColumn(name = "id_user"))
			private List<User> users;
	
	
	
//	@JsonIgnore
//	public Set<User> getUsers(){
//		Set<User> set = new HashSet<User>();
//		for(UserRole  x: users) {
//			set.add(x.getUser());
//		}
//		return set;
//	}

}
