package com.imoob.hml.service;

import java.time.Instant;
import java.util.List;
import java.util.Optional;

import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.imoob.hml.model.User;
import com.imoob.hml.repository.UserRepository;
import com.imoob.hml.service.exceptions.DatabaseException;
import com.imoob.hml.service.exceptions.ResourceNotFoundException;
import com.imoob.hml.service.utils.StringUtils;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class UserService {
	private final UserRepository repository;
	
	public List<User> findAll(Pageable pageable){
		return repository.findAll(pageable);
	}
	
	public User findUserById(Long id) {
		Optional<User> obj = repository.findById(id);
		return obj.orElseThrow(() -> new ResourceNotFoundException(id));
	}
	
	public User insert (User obj) {
		return repository.save(obj);
	}
	
	public void delete(Long id) {
		try {
			repository.deleteById(id);
		}
		catch (EmptyResultDataAccessException e) {
			throw new ResourceNotFoundException(id);
		}
		catch (DataIntegrityViolationException e) {
			throw new DatabaseException(e.getMessage());
		}
	}
	
	public User update(Long id, User obj) {
		try {
			User entity = repository.findById(id).get();
			updateData(entity, obj);
			return repository.save(entity);
		} catch (Exception e) {
			throw new ResourceNotFoundException(id);
		}
	}

	private void updateData(User entity, User obj) {
		entity.setFirstName(obj.getFirstName());
		entity.setMiddleNames(obj.getMiddleNames());
		entity.setLastName(obj.getLastName());
		entity.setEmail(obj.getEmail());
		entity.setStatus(obj.getStatus());
		entity.setCpf(obj.getCpf());
		entity.setCepAddress(obj.getCepAddress());
		entity.setNumberAddress(obj.getNumberAddress());
		entity.setBirthDate(obj.getBirthDate());
		entity.setLastUpdate(Instant.now());
		
	}

	public User patchUpdate(Long id, User obj) {
		try {
			User currentUser = repository.findById(id).get();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
}
